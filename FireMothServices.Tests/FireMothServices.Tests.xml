<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FireMoth.Services.Tests.Unit</name>
    </assembly>
    <members>
        <member name="T:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.FileFingerprintTests">
             <summary>
             <see cref="T:RiotClub.FireMoth.Services.Repository.FileFingerprint"/> unit tests.
            
             Test naming convention: [method]_[preconditions]_[expected result]
            
             Ctor
             - base64Hash string can't be null or empty
                 * Ctor_NullString_ThrowsArgumentNullException
                 * Ctor_EmptyOrWhitespaceString_ThrowsArgumentException
             - base64Hash must be a valid base 64 string
                 * Ctor_InvalidBase64String_ThrowsArgumentException
            
             Equals
             - Null FileFingerprint returns false
                 - Equal_NullFileFingerprint_ReturnsFalse
             - Semantically equal FileFingerprint returns true
                 - Equal_EqualFileFingerprint_ReturnsTrue
             - Semantically different FileFingerprint returns false
                 - Equal_DifferentFileFingerprint_ReturnsFalse
             - Incompatible type returns false
                 - Equal_IncompatibleType_ReturnsFalse
            
             operator ==
             - Two semantically equal FileFingerprint instances returns true
                 - EqualityOperator_LeftOperandEqualsRightOperand_ReturnsTrue
             - One null and one non-null FileFingerprint instance returns false
                 - EqualityOperator_NullLeftOperandAndNonNullRightOperand_ReturnsFalse
                 - EqualityOperator_NonNullLeftOperandAndNullRightOperand_ReturnsFalse
             - Two null values returns true
                 - EqualityOperator_BothOperandsNull_ReturnsTrue
            
             operator !=
             - Two semantically equal FileFingerprint instances returns false
                 - InequalityOperator_LeftOperandEqualsRightOperand_ReturnsFalse
             - One null and one non-null FileFingerprint instance returns true
                 - InequalityOperator_NullLeftOperandAndNonNullRightOperand_ReturnsTrue
                 - InequalityOperator_NonNullLeftOperandAndNullRightOperand_ReturnsTrue
             - Two null values returns false
                 - InequalityOperator_BothOperandsNull_ReturnsFalse
            
             GetHashCode
             - Semantically equal instances have equal hashes
                  - GetHashCode_EqualInstances_ReturnEqualHashCodes
             .
             </summary>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.InMemory.MemoryDataAccessLayerTests">
             <summary>
             Ctor
             - Passing a null ILogger{MemoryDataAccessLayer} throws an ArgumentNullException.
            
             GetAsync
             - Passing null filter and null orderBy expressions returns an unfiltered and unordered
               collection of records.
             - Passing non-null filter and null orderBy expressions returns a filtered and unordered
               collection of records.
             - Passing null filter and non-null orderBy expressions returns an unfiltered and ordered
               collection of records.
             - Passing non-null filter and non-null orderBy expressions returns a filtered and ordered
               collection of records.
            
             AddAsync
             - Passing a null FileFingerprint throws an ArgumentNullException.
             - Passing a non-null FileFingerprint adds a record to the data access layer.
                 
             AddManyAsync
             - Passing a null IEnumerable{FileFingerprint} throws an ArgumentNullException.
             - Passing a non-null IEnumerable{FileFingerprint} adds the records to the data access layer.
                 
             DeleteAsync
             - Passing a null FileFingerprint throws an ArgumentNullException.
             - Passing a FileFingerprint that matches a record in the data access layer deletes the record.
             - Passing a FileFingerprint that matches a record in the data access layer returns true.
             - Passing a FileFingerprint that does not match a record in the data access layer does not
               modify existing records.
             - Passing a FileFingerprint that does not match a record in the data access layer returns false.
                 
             DeleteAllAsync
             - Deletes all records from the data access layer.
             - Returns the number of records that were deleted from the data access layer.
             </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.InMemory.MemoryDataAccessLayerTests.Ctor_NullILogger_ThrowsArgumentNullException">
            <summary>Ctor: Passing a null ILogger{MemoryDataAccessLayer} throws an
            ArgumentNullException.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.InMemory.MemoryDataAccessLayerTests.GetAsync_NullFilterNullOrderBy_ReturnsUnfilteredUnorderedCollection">
            <summary>GetAsync: Passing null filter and null orderBy expressions returns an unfiltered
            and unordered collection of records.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.InMemory.MemoryDataAccessLayerTests.GetAsync_NonNullFilterNullOrderBy_ReturnsFilteredUnorderedCollection">
            <summary>GetAsync: Passing non-null filter and null orderBy expressions returns a filtered
            and unordered collection of records.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.InMemory.MemoryDataAccessLayerTests.GetAsync_NullFilterNonNullOrderBy_ReturnsUnfilteredOrderedCollection">
            <summary>GetAsync: Passing null filter and non-null orderBy expressions returns an
            unfiltered and ordered collection of records.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.InMemory.MemoryDataAccessLayerTests.GetAsync_NonNullFilterNonNullOrderBy_ReturnsFilteredOrderedCollection">
            <summary>GetAsync: Passing non-null filter and non-null orderBy expressions returns a
            filtered and ordered collection of records.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.InMemory.MemoryDataAccessLayerTests.AddAsync_NullFileFingerprint_ThrowsArgumentNullException">
            <summary>AddAsync: Passing a null FileFingerprint throws an ArgumentNullException.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.InMemory.MemoryDataAccessLayerTests.AddAsync_NonNullFileFingerprint_AddsRecord">
            <summary>AddAsync: Passing a non-null FileFingerprint adds a record to the data access
            layer.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.InMemory.MemoryDataAccessLayerTests.AddManyAsync_NullIEnumerable_ThrowsArgumentNullException">
            <summary>AddManyAsync: Passing a null IEnumerable{FileFingerprint} throws an
            ArgumentNullException.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.InMemory.MemoryDataAccessLayerTests.AddManyAsync_NonNullIEnumerable_AddsRecords">
            <summary>Passing a non-null IEnumerable{FileFingerprint} adds the records to the data access
            layer.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.InMemory.MemoryDataAccessLayerTests.DeleteAsync_NullFileFingerprint_ThrowsArgumentNullException">
            <summary>DeleteAsync: Passing a null FileFingerprint throws an ArgumentNullException.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.InMemory.MemoryDataAccessLayerTests.DeleteAsync_MatchingFileFingerprintExists_MatchingValueIsDeleted">
            <summary>DeleteAsync: Passing a FileFingerprint that matches a record in the data access
            layer deletes the record.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.InMemory.MemoryDataAccessLayerTests.DeleteAsync_MatchingFileFingerprintExists_ReturnsTrue">
            <summary>DeleteAsync: Passing a FileFingerprint that matches a record in the data access
            layer returns true.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.InMemory.MemoryDataAccessLayerTests.DeleteAsync_MatchingFileFingerprintDoesNotExist_NoChangesMade">
            <summary>DeleteAsync: Passing a FileFingerprint that does not match a record in the data
            access layer does not modify existing records.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.InMemory.MemoryDataAccessLayerTests.DeleteAsync_MatchingFileFingerprintDoesNotExist_ReturnsFalse">
            <summary>DeleteAsync: Passing a FileFingerprint that does not match a record in the data
            access layer returns false.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.InMemory.MemoryDataAccessLayerTests.DeleteAllAsync_MethodCalled_DeletesAllRecords">
            <summary>DeleteAllAsync: Deletes all records from the data access layer.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.InMemory.MemoryDataAccessLayerTests.DeleteAllAsync_MethodCalled_ReturnsDeletedRecordCount">
            <summary>DeleteAllAsync: Returns the number of records that were deleted from the data
            access layer.</summary>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.Sqlite.SqliteDataAccessLayerTests">
             <summary>
             Ctor
             - Passing a null ILogger{MemoryDataAccessLayer} throws an ArgumentNullException.
             - Passing a null FireMothContext throws an ArgumentNullException.
            
             GetAsync
             - Passing null filter and null orderBy expressions returns an unfiltered and unordered
               collection of records.
             - Passing non-null filter and null orderBy expressions returns a filtered and unordered
               collection of records.
             - Passing null filter and non-null orderBy expressions returns an unfiltered and ordered
               collection of records.
             - Passing non-null filter and non-null orderBy expressions returns a filtered and ordered
               collection of records.
            
             AddAsync
             - Passing a null FileFingerprint throws an ArgumentNullException.
             - Passing a non-null FileFingerprint adds a record to the data access layer.
            
             AddManyAsync
             - Passing a null IEnumerable{FileFingerprint} throws an ArgumentNullException.
             - Passing a non-null IEnumerable{FileFingerprint} adds the records to the data access layer.
            
             DeleteAsync
             - Passing a null FileFingerprint throws an ArgumentNullException.
             - Passing a FileFingerprint that matches a record in the data access layer deletes the record.
             - Passing a FileFingerprint that matches a record in the data access layer returns true.
             - Passing a FileFingerprint that does not match a record in the data access layer does not
               modify existing records.
             - Passing a FileFingerprint that does not match a record in the data access layer returns false.
            
             DeleteAllAsync
             - Deletes all records from the data access layer.
             - Returns the number of records that were deleted from the data access layer.
             </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.Sqlite.SqliteDataAccessLayerTests.Ctor_NullILogger_ThrowsArgumentNullException">
            <summary>Ctor: Passing a null ILogger{MemoryDataAccessLayer} throws an
            ArgumentNullException.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.Sqlite.SqliteDataAccessLayerTests.Ctor_NullFireMothContext_ThrowsArgumentNullException">
            <summary>Ctor: Passing a null FireMothContext throws an ArgumentNullException.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.Sqlite.SqliteDataAccessLayerTests.GetAsync_NullFilterNullOrderBy_ReturnsUnfilteredUnorderedCollection">
            <summary>GetAsync: Passing null filter and null orderBy expressions returns an unfiltered
            and unordered collection of records.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.Sqlite.SqliteDataAccessLayerTests.GetAsync_NonNullFilterNullOrderBy_ReturnsFilteredUnorderedCollection">
            <summary>GetAsync: Passing non-null filter and null orderBy expressions returns a filtered
            and unordered collection of records.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.Sqlite.SqliteDataAccessLayerTests.GetAsync_NullFilterNonNullOrderBy_ReturnsUnfilteredOrderedCollection">
            <summary>GetAsync: Passing null filter and non-null orderBy expressions returns an
            unfiltered and ordered collection of records.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.Sqlite.SqliteDataAccessLayerTests.GetAsync_NonNullFilterNonNullOrderBy_ReturnsFilteredOrderedCollection">
            <summary>GetAsync: Passing non-null filter and non-null orderBy expressions returns a
            filtered and ordered collection of records.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.Sqlite.SqliteDataAccessLayerTests.AddAsync_NullFileFingerprint_ThrowsArgumentNullException">
            <summary>AddAsync: Passing a null FileFingerprint throws an ArgumentNullException.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.Sqlite.SqliteDataAccessLayerTests.AddAsync_NonNullFileFingerprint_AddsRecord">
            <summary>AddAsync: Passing a non-null FileFingerprint adds a record to the data access
            layer.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.Sqlite.SqliteDataAccessLayerTests.AddManyAsync_NullIEnumerable_ThrowsArgumentNullException">
            <summary>AddManyAsync: Passing a null IEnumerable{FileFingerprint} throws an
            ArgumentNullException.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.Sqlite.SqliteDataAccessLayerTests.AddManyAsync_NonNullIEnumerable_AddsRecords">
            <summary>AddManyAsync: Passing a non-null IEnumerable{FileFingerprint} adds the records to
            the data access layer.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.Sqlite.SqliteDataAccessLayerTests.DeleteAsync_NullFileFingerprint_ThrowsArgumentNullException">
            <summary>DeleteAsync: Passing a null FileFingerprint throws an ArgumentNullException.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.Sqlite.SqliteDataAccessLayerTests.DeleteAsync_MatchingFileFingerprintExists_MatchingValueIsDeleted">
            <summary>DeleteAsync: Passing a FileFingerprint that matches a record in the data access
            layer deletes the record.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.Sqlite.SqliteDataAccessLayerTests.DeleteAsync_MatchingFileFingerprintExists_ReturnsTrue">
            <summary>DeleteAsync: If non-null FileFingerprint that matches a record in the data access
            layer is passed, true is returned.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.Sqlite.SqliteDataAccessLayerTests.DeleteAsync_MatchingFileFingerprintDoesNotExist_NoChangesMade">
            <summary>DeleteAsync: If non-null FileFingerprint that does not match a record in the data
            access layer is passed, the data access layer's existing records are not modified.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.Sqlite.SqliteDataAccessLayerTests.DeleteAsync_MatchingFileFingerprintDoesNotExist_ReturnsFalse">
            <summary>DeleteAsync: If non-null FileFingerprint that does not match a record in the data
            access layer is passed, false is returned.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.Sqlite.SqliteDataAccessLayerTests.DeleteAllAsync_MethodCalled_DeletesAllRecords">
            <summary>DeleteAllAsync: Deletes all records from the data access layer.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.DataAccess.Sqlite.SqliteDataAccessLayerTests.DeleteAllAsync_MethodCalled_ReturnsDeletedRecordCount">
            <summary>DeleteAllAsync: Returns the number of records that were deleted from the data
            access layer.</summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tests.Unit.Extensions.MockExtensions.VerifyLogCalled``1(Moq.Mock{Microsoft.Extensions.Logging.ILogger{``0}},System.String,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Verifies that a <see cref="M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])"/>
            invocation with the specified message was performed on the mock.
            </summary>
            <typeparam name="T">The type of the <see cref="T:Microsoft.Extensions.Logging.ILogger"/>.</typeparam>
            <param name="logger">The <see cref="T:Moq.Mock`1"/> on which the verificaation will
            be performed.</param>
            <param name="expectedMessage">The expected message to verify an invocation of
            <see cref="M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])"/> with.</param>
            <param name="logLevel">The expected log level to verify an invocation of
            <see cref="M:Microsoft.Extensions.Logging.LoggerExtensions.LogInformation(Microsoft.Extensions.Logging.ILogger,System.String,System.Object[])"/> with.</param>
            <returns>The <see cref="T:Moq.Mock`1"/> on which this method was called.</returns>
        </member>
    </members>
</doc>
