<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FireMothServices</name>
    </assembly>
    <members>
        <member name="T:RiotClub.FireMoth.Services.DataAccess.CsvDataAccessProvider">
            <summary>
            Implementation of a data access provider that persists data to a stream in CSV format.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.CsvDataAccessProvider.#ctor(System.IO.TextWriter,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.DataAccess.CsvDataAccessProvider"/> class.
            </summary>
            <param name="outputWriter">The <see cref="T:System.IO.TextWriter"/> object to which data is written.
            </param>
            <param name="leaveOpen">If <c>true</c>, the underlying <see cref="T:System.IO.TextWriter"/> will not
            be closed when the <see cref="T:RiotClub.FireMoth.Services.DataAccess.CsvDataAccessProvider"/> is disposed.</param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.CsvDataAccessProvider.AddFileRecord(FireMothServices.DataAccess.IFileFingerprint)">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.CsvDataAccessProvider.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.CsvDataAccessProvider.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and, optionally, managed resources.
            </summary>
            <param name="disposing">If true, managed resources are freed.</param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.CsvDataAccessProvider.IsBase64String(System.String)">
            <summary>
            Determines if the provided string is a valid base 64 string.
            </summary>
            <param name="base64">A <see cref="T:System.String"/> to check for base 64 validity.</param>
            <returns><c>true</c> if the provided string is a valid base 64 string.</returns>
        </member>
        <member name="T:RiotClub.FireMoth.Services.DataAccess.IDataAccessProvider">
            <summary>
            Defines the public interface for a class that implements data access and persistence operations.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.IDataAccessProvider.AddFileRecord(FireMothServices.DataAccess.IFileFingerprint)">
            <summary>
            Adds a file and its hash value to the backing store.
            </summary>
            <param name="fileFingerprint">An <see cref="T:FireMothServices.DataAccess.IFileFingerprint"/> containing the properties of the file to
            store.</param>
        </member>
        <member name="T:RiotClub.FireMoth.Services.FileScanning.FileScanner">
            <summary>
            Directory scanner implementation that reads the files in a directory and writes the file
            and hash to an <see cref="T:RiotClub.FireMoth.Services.DataAccess.IDataAccessProvider"/>.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.FileScanner.#ctor(RiotClub.FireMoth.Services.DataAccess.IDataAccessProvider,FireMothServices.DataAnalysis.IFileHasher,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.FileScanning.FileScanner"/> class.
            </summary>
            <param name="dataAccessProvider">A <see cref="T:RiotClub.FireMoth.Services.DataAccess.IDataAccessProvider"/> that provides
            access to the application backing store.</param>
            <param name="hasher">An <see cref="T:FireMothServices.DataAnalysis.IFileHasher"/> that is used to compute hash values
            for scanned files.</param>
            <param name="logWriter">A <see cref="T:System.IO.TextWriter"/> to which logging output will be
            written.</param>
        </member>
        <member name="P:RiotClub.FireMoth.Services.FileScanning.FileScanner.TotalFilesScanned">
            <summary>
            Gets the total number of files scanned by this <see cref="T:RiotClub.FireMoth.Services.FileScanning.FileScanner"/>.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.FileScanning.FileScanner.TotalFilesSkipped">
            <summary>
            Gets the total number of files that were skpped by this <see cref="T:RiotClub.FireMoth.Services.FileScanning.FileScanner"/>.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.FileScanner.ScanDirectory(System.IO.Abstractions.IDirectoryInfo,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.FileScanner.ProcessFiles(System.Collections.Generic.IEnumerable{System.IO.Abstractions.IFileInfo})">
            <summary>
            Hashes a set of files and records the filename and hash string.
            </summary>
            <param name="files">The set of files to hash and record.</param>
            <returns>An tuple <c>(int, int)</c> indicating the number of files scanned and the
            number of files skipped, respectively.</returns>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.FileScanner.GetBase64HashFromStream(System.IO.Stream)">
            <summary>
            Calculates a hash of the provided stream's data and returns a base 64 encoded string of
            the hash.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> containing the data to hash.</param>
            <returns>A base 64 encoded <see cref="T:System.String"/> of the hash.</returns>
        </member>
        <member name="T:RiotClub.FireMoth.Services.FileScanning.IFileScanner">
            <summary>
            Defines the public interface for a class that implements a directory scanner. A directory scanner is responsible
            for reading, analyzing, and persisting a hash or other signature that uniquely identifies a file and its
            contents.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.IFileScanner.ScanDirectory(System.IO.Abstractions.IDirectoryInfo,System.Boolean)">
            <summary>
            Scans the provided directory, analyzing and storing hashes or signatures that uniquely identify the files
            contained within.
            </summary>
            <param name="directory">The path of the directory to scan.</param>
            <param name="recursive">Determines whether subdirectories of the provided directory are
            recursively scanned.</param>
            <returns>A <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanResult"/> value indicating the result of the directory scanning operation.
            </returns>
        </member>
        <member name="T:RiotClub.FireMoth.Services.FileScanning.ScanResult">
            <summary>
            Specifies the result of a file scan operation.
            </summary>
        </member>
        <member name="F:RiotClub.FireMoth.Services.FileScanning.ScanResult.ScanSuccess">
            <summary>
            Inidicates the file scan operation was successful.
            </summary>
        </member>
        <member name="F:RiotClub.FireMoth.Services.FileScanning.ScanResult.ScanFailure">
            <summary>
            Indicates the file scan operation encountered a problem that prevented it from completing successfully.
            </summary>
        </member>
        <member name="T:FireMothServices.DataAccess.FileFingerprint">
            <summary>
            Conatins data that uniquely identifies a file and its data.
            </summary>
        </member>
        <member name="M:FireMothServices.DataAccess.FileFingerprint.#ctor(System.IO.Abstractions.IFileInfo,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:FireMothServices.DataAccess.FileFingerprint"/> class.
            </summary>
            <param name="fileInfo">A <see cref="T:System.IO.Abstractions.IFileInfo"/> containing information about the file.</param>
            <param name="base64Hash">A <see cref="T:System.String"/> containing a valid base 64 hash for the specified file.
            </param>
        </member>
        <member name="P:FireMothServices.DataAccess.FileFingerprint.DirectoryName">
            <summary>
            Gets the directory's full path.
            </summary>
        </member>
        <member name="P:FireMothServices.DataAccess.FileFingerprint.Name">
            <summary>
            Gets the name of the file.
            </summary>
        </member>
        <member name="P:FireMothServices.DataAccess.FileFingerprint.Length">
            <summary>
            Gets the size, in bytes, of the file.
            </summary>
        </member>
        <member name="P:FireMothServices.DataAccess.FileFingerprint.Base64Hash">
            <summary>
            Gets or sets the base-64 hash of the file's data.
            </summary>
        </member>
        <member name="M:FireMothServices.DataAccess.FileFingerprint.IsBase64String(System.String)">
            <summary>
            Returns <c>true</c> if the provided string is a valid base 64 string.
            </summary>
            <param name="base64">The string to check.</param>
            <returns><c>true</c> if the provided string is a valid base 64 string.</returns>
        </member>
        <member name="T:FireMothServices.DataAnalysis.IFileHasher">
            <summary>
            Defines the public interface for a class that implements file hashing operations.
            </summary>
        </member>
        <member name="M:FireMothServices.DataAnalysis.IFileHasher.ComputeHashFromStream(System.IO.Stream)">
            <summary>
            Computes the hash of the provided stream's data.
            </summary>
            <param name="inputStream">The <see cref="T:System.IO.Stream"/> containing the data to hash.</param>
            <returns>An array of <c>byte</c> containing the value of the computed hash.</returns>
        </member>
        <member name="T:FireMothServices.DataAnalysis.SHA256FileHasher">
            <summary>
            Provides file hashing services using the SHA256 algorithm.
            </summary>
        </member>
        <member name="M:FireMothServices.DataAnalysis.SHA256FileHasher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:FireMothServices.DataAnalysis.SHA256FileHasher"/> class.
            </summary>
        </member>
        <member name="M:FireMothServices.DataAnalysis.SHA256FileHasher.ComputeHashFromStream(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:FireMothServices.DataAnalysis.SHA256FileHasher.Dispose">
            <summary>
            Releases all resources used by the current instance of this <see cref="T:FireMothServices.DataAnalysis.SHA256FileHasher"/>.
            </summary>
        </member>
        <member name="M:FireMothServices.DataAnalysis.SHA256FileHasher.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and, optionally, managed resources.
            </summary>
            <param name="disposing">If true, managed resources are freed.</param>
        </member>
    </members>
</doc>
