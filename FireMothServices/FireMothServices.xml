<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FireMoth.Services</name>
    </assembly>
    <members>
        <member name="T:RiotClub.FireMoth.Services.DataAccess.IDataAccessLayer`1">
            <summary>
            Defines the public interface for a class that implements data access and persistence operations.
            </summary>
            <typeparam name="TValue">The type of domain objects this data access layer manipulates.
            </typeparam>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.IDataAccessLayer`1.GetAsync(System.Func{`0,System.Boolean},System.Func{`0,System.String})">
            <summary>
            Retrieves values from the data layer.
            </summary>
            <param name="filter">A lambda expression that specifies a filter condition.</param>
            <param name="orderBy">A lambda expression that specifies an ordering.</param>
            <returns>A collection of values matching the specified filter with the specified ordering.
            </returns>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.IDataAccessLayer`1.AddAsync(`0)">
            <summary>
            Adds a value to the data layer.
            </summary>
            <param name="value">A value of type <typeparamref name="TValue"/> to add to the data layer.
            </param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.IDataAccessLayer`1.AddManyAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a collection of values to the data layer.
            </summary>
            <param name="values">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection to add to the data
            layer.</param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.IDataAccessLayer`1.DeleteAsync(`0)">
            <summary>
            Deletes a value from the data layer.
            </summary>
            <param name="value">A value of type <typeparamref name="TValue"/> to delete from the data
            layer.</param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.IDataAccessLayer`1.DeleteAllAsync">
            <summary>
            Deletes all values from the data layer.
            </summary>
            <returns>The number of rows that were deleted.</returns>
        </member>
        <member name="T:RiotClub.FireMoth.Services.DataAccess.InMemory.MemoryDataAccessLayer">
            <summary>
            Implementation of a data access layer that persists data to memory.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.InMemory.MemoryDataAccessLayer.#ctor(Microsoft.Extensions.Logging.ILogger{RiotClub.FireMoth.Services.DataAccess.InMemory.MemoryDataAccessLayer})">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.DataAccess.InMemory.MemoryDataAccessLayer"/> class.
            </summary>
            <param name="logger">An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> used to log information.</param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.InMemory.MemoryDataAccessLayer.GetAsync(System.Func{RiotClub.FireMoth.Services.Repository.FileFingerprint,System.Boolean},System.Func{RiotClub.FireMoth.Services.Repository.FileFingerprint,System.String})">
            <summary>
            Retrieves file fingerprints from the data access layer.
            </summary>
            <param name="filter">A lambda expression that specifies a filter condition.</param>
            <param name="orderBy">A lambda expression that specifies an ordering.</param>
            <returns>IEnumerable collection of file fingerprints.</returns>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.InMemory.MemoryDataAccessLayer.AddAsync(RiotClub.FireMoth.Services.Repository.FileFingerprint)">
            <summary>
            Adds the provided <see cref="T:RiotClub.FireMoth.Services.Repository.IFileFingerprint"/> to the data access layer.
            </summary>
            <param name="fileFingerprint">A <see cref="T:RiotClub.FireMoth.Services.Repository.IFileFingerprint"/> to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when provided <see cref="T:RiotClub.FireMoth.Services.Repository.IFileFingerprint"/>
            reference is null.</exception>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.InMemory.MemoryDataAccessLayer.AddManyAsync(System.Collections.Generic.IEnumerable{RiotClub.FireMoth.Services.Repository.FileFingerprint})">
            <summary>
            Adds the provided collection of <see cref="T:RiotClub.FireMoth.Services.Repository.IFileFingerprint"/>s to the data access layer.
            </summary>
            <param name="fileFingerprints">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing
            items to add.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when provided collection is null.</exception>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.InMemory.MemoryDataAccessLayer.DeleteAsync(RiotClub.FireMoth.Services.Repository.FileFingerprint)">
            <summary>
            Deletes the provided <see cref="T:RiotClub.FireMoth.Services.Repository.IFileFingerprint"/> from the data access layer.
            </summary>
            <param name="fileFingerprint">A <see cref="T:RiotClub.FireMoth.Services.Repository.IFileFingerprint"/> to delete.</param>
            <returns><c>true</c> if a file matching the provided <see cref="T:RiotClub.FireMoth.Services.Repository.IFileFingerprint"/>'s was
            deleted, <c>false</c> if no match could be found.</returns>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.InMemory.MemoryDataAccessLayer.DeleteAllAsync">
            <summary>
            Deletes all <see cref="T:RiotClub.FireMoth.Services.Repository.FileFingerprint"/>s from the data access layer.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.Sqlite.FileFingerprintTypeConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{RiotClub.FireMoth.Services.Repository.FileFingerprint})">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.Sqlite.FireMothContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions{RiotClub.FireMoth.Services.DataAccess.Sqlite.FireMothContext})">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.DataAccess.Sqlite.FireMothContext"/> class.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.Sqlite.FireMothContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc/>
            <seealso cref="T:RiotClub.FireMoth.Services.DataAccess.Sqlite.FileFingerprintTypeConfiguration"/>
        </member>
        <member name="T:RiotClub.FireMoth.Services.DataAccess.Sqlite.SqliteDataAccessLayer">
            <summary>
            Implementation of a data access layer that persists data to a SQLite database.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.Sqlite.SqliteDataAccessLayer.#ctor(Microsoft.Extensions.Logging.ILogger{RiotClub.FireMoth.Services.DataAccess.Sqlite.SqliteDataAccessLayer},RiotClub.FireMoth.Services.DataAccess.Sqlite.FireMothContext)">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.DataAccess.Sqlite.SqliteDataAccessLayer"/> class.
            </summary>
            <param name="logger">An <see cref="T:Microsoft.Extensions.Logging.ILogger"/> used to log information.</param>
            <param name="context">A <see cref="T:RiotClub.FireMoth.Services.DataAccess.Sqlite.FireMothContext"/> instance representing the database
            connection.</param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.Sqlite.SqliteDataAccessLayer.GetAsync(System.Func{RiotClub.FireMoth.Services.Repository.FileFingerprint,System.Boolean},System.Func{RiotClub.FireMoth.Services.Repository.FileFingerprint,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.Sqlite.SqliteDataAccessLayer.AddAsync(RiotClub.FireMoth.Services.Repository.FileFingerprint)">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.Sqlite.SqliteDataAccessLayer.AddManyAsync(System.Collections.Generic.IEnumerable{RiotClub.FireMoth.Services.Repository.FileFingerprint})">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.Sqlite.SqliteDataAccessLayer.DeleteAsync(RiotClub.FireMoth.Services.Repository.FileFingerprint)">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.Sqlite.SqliteDataAccessLayer.DeleteAllAsync">
            <inheritdoc/>
        </member>
        <member name="T:RiotClub.FireMoth.Services.DataAnalysis.IFileHasher">
            <summary>
            Defines the public interface for a class that implements file hashing operations.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAnalysis.IFileHasher.ComputeHashFromStream(System.IO.Stream)">
            <summary>
            Computes the hash of the provided stream's data.
            </summary>
            <param name="inputStream">The <see cref="T:System.IO.Stream"/> containing the data to hash.</param>
            <returns>An array of <c>byte</c> containing the value of the computed hash.</returns>
        </member>
        <member name="T:RiotClub.FireMoth.Services.DataAnalysis.SHA256FileHasher">
            <summary>
            Provides file hashing services using the SHA256 algorithm.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAnalysis.SHA256FileHasher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.DataAnalysis.SHA256FileHasher"/> class.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAnalysis.SHA256FileHasher.ComputeHashFromStream(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAnalysis.SHA256FileHasher.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAnalysis.SHA256FileHasher.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and, optionally, managed resources.
            </summary>
            <param name="disposing">If true, managed resources are freed.</param>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Extensions.StringExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.String"/> objects.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Extensions.StringExtensions.IsEmptyOrWhiteSpace(System.String)">
            <summary>
            Returns <c>true</c> if the provided string is empty or contains only whitespace
            characters.
            </summary>
            <param name="value">The string to check.</param>
            <returns><c>true</c> if the provided string is empty or contains only whitespace.
            </returns>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Extensions.StringExtensions.IsBase64String(System.String)">
            <summary>
            Returns <c>true</c> if the provided string is a valid base 64 string.
            </summary>
            <param name="value">The string to check.</param>
            <returns><c>true</c> if the provided string is a valid base 64 string.</returns>
        </member>
        <member name="T:RiotClub.FireMoth.Services.FileScanning.ScanError">
            <summary>
            Represents an error that occured during a file scan.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.ScanError.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanError"/> class.
            </summary>
            <param name="path">The path to the file or directory that this error pertains to.
            </param>
            <param name="message">A message describing this error.</param>
            <param name="exception">Any exception associated with this error.</param>
        </member>
        <member name="P:RiotClub.FireMoth.Services.FileScanning.ScanError.Path">
            <summary>
            Gets the path to the file or directory related to this error.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.FileScanning.ScanError.Message">
            <summary>
            Gets the message describing this error.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.FileScanning.ScanError.Exception">
            <summary>
            Gets the exception related to this error.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.ScanError.op_Equality(RiotClub.FireMoth.Services.FileScanning.ScanError,RiotClub.FireMoth.Services.FileScanning.ScanError)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">An instance of <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanError"/> to test for equality.</param>
            <param name="right">A second instance of <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanError"/> to test for equality.
            </param>
            <returns><c>true</c> if the two <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanError"/>s are equal; false otherwise.
            </returns>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.ScanError.op_Inequality(RiotClub.FireMoth.Services.FileScanning.ScanError,RiotClub.FireMoth.Services.FileScanning.ScanError)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">An instance of <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanError"/> to test for inequality.
            </param>
            <param name="right">A second instance of <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanError"/> to test for inequality.
            </param>
            <returns><c>true</c> if the two <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanError"/>s are not equal; false otherwise.
            </returns>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.ScanError.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.ScanError.Equals(RiotClub.FireMoth.Services.FileScanning.ScanError)">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.ScanError.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:RiotClub.FireMoth.Services.FileScanning.ScanResult">
            <summary>
            Specifies the result of a file scan operation.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.FileScanning.ScanResult.ScannedFiles">
            <summary>
            Gets a list of <see cref="T:RiotClub.FireMoth.Services.Repository.FileFingerprint"/>s for files that have been successfully scanned.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.FileScanning.ScanResult.SkippedFiles">
            <summary>
            Gets a key-value list of files that were skipped and the reason for the skip.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.FileScanning.ScanResult.Errors">
            <summary>
            Gets a list of errors that occurred.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.ScanResult.op_Addition(RiotClub.FireMoth.Services.FileScanning.ScanResult,RiotClub.FireMoth.Services.FileScanning.ScanResult)">
            <summary>
            Combines two <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanResult"/> objects by combining their
            <see cref="P:RiotClub.FireMoth.Services.FileScanning.ScanResult.ScannedFiles"/>, <see cref="P:RiotClub.FireMoth.Services.FileScanning.ScanResult.SkippedFiles"/>, and <see cref="P:RiotClub.FireMoth.Services.FileScanning.ScanResult.Errors"/>
            collections.
            </summary>
            <param name="a">The first of two <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanResult"/> operands to sum.</param>
            <param name="b">The second of two <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanResult"/> operands to sum.</param>
            <returns>A new <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanResult"/> containing the sum of the two operands.
            </returns>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Migrations.CreateDb">
            <inheritdoc />
        </member>
        <member name="M:RiotClub.FireMoth.Services.Migrations.CreateDb.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:RiotClub.FireMoth.Services.Migrations.CreateDb.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:RiotClub.FireMoth.Services.Migrations.CreateDb.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:RiotClub.FireMoth.Services.Orchestration.DirectoryScanOptions">
            <summary>
            Specifies options that are used when performing a directory scan.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.Orchestration.DirectoryScanOptions.Directory">
            <summary>
            Gets or sets the directory to be scanned.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.Orchestration.DirectoryScanOptions.Recursive">
            <summary>
            Gets or sets a value indicating whether subdirectories of <see cref="P:RiotClub.FireMoth.Services.Orchestration.DirectoryScanOptions.Directory"/> will
            be recursively scanned.
            </summary>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Orchestration.DirectoryScanOrchestrator">
            <summary>
            Directory scanner implementation that reads the files in a directory and writes the file and
            hash to an <see cref="T:RiotClub.FireMoth.Services.DataAccess.IDataAccessLayer`1"/>.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Orchestration.DirectoryScanOrchestrator.#ctor(RiotClub.FireMoth.Services.Orchestration.IFileScanOrchestrator,Microsoft.Extensions.Options.IOptions{RiotClub.FireMoth.Services.Orchestration.DirectoryScanOptions},Microsoft.Extensions.Logging.ILogger{RiotClub.FireMoth.Services.Orchestration.FileScanOrchestrator})">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.Orchestration.DirectoryScanOrchestrator"/> class.
            </summary>
            <param name="fileScanOrchestrator">An <see cref="T:RiotClub.FireMoth.Services.Orchestration.IFileScanOrchestrator"/> that manages
            scanning of files.</param>
            <param name="directoryScanOptions">An <see cref="T:Microsoft.Extensions.Options.IOptions`1"/>
            containing the configured options for this directory scan orchestrator.</param>
            <param name="logger">An <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> to which logging output
            will be written.</param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Orchestration.DirectoryScanOrchestrator.ScanDirectoryAsync">
            <inheritdoc/>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Orchestration.FileScanOrchestrator">
            <summary>
            File scanner implementation that scans a collection of files and writes file fingerprint data to an
            <see cref="T:RiotClub.FireMoth.Services.DataAccess.IDataAccessLayer`1"/>.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Orchestration.FileScanOrchestrator.#ctor(RiotClub.FireMoth.Services.Repository.IFileFingerprintRepository,RiotClub.FireMoth.Services.DataAnalysis.IFileHasher,Microsoft.Extensions.Logging.ILogger{RiotClub.FireMoth.Services.Orchestration.FileScanOrchestrator})">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.Orchestration.FileScanOrchestrator"/> class.
            </summary>
            <param name="fileFingerprintRepository">An <see cref="T:RiotClub.FireMoth.Services.Repository.IFileFingerprintRepository"/> that provides access to
            the application backing store.</param>
            <param name="fileHasher">An <see cref="T:RiotClub.FireMoth.Services.DataAnalysis.IFileHasher"/> that is used to compute hash values for scanned files.
            </param>
            <param name="logger">An <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> to which logging output will be written.
            </param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Orchestration.FileScanOrchestrator.ScanFilesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Orchestration.FileScanOrchestrator.ProcessFiles(System.Collections.Generic.IEnumerable{System.String},RiotClub.FireMoth.Services.FileScanning.ScanResult)">
            <summary>
            Hashes a set of files and records the filename and hash string.
            </summary>
            <param name="files">The set of files to hash and record.</param>
            <param name="scanResult">A <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanResult"/> to which the names of scanned and
            skipped files will be added.</param>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Orchestration.IDirectoryScanOrchestrator">
            <summary>
            Defines the interface for a class that implements a directory scanner that reads the files in
            the configured directory and writes the file's unique fingerprint data to an
            <see cref="T:RiotClub.FireMoth.Services.DataAccess.IDataAccessLayer`1"/>.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Orchestration.IDirectoryScanOrchestrator.ScanDirectoryAsync">
            <summary>
            Scans the files in the configured.
            </summary>
            <returns>A <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanResult"/> containing the result of the directory scan.</returns>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Orchestration.IFileScanOrchestrator">
            <summary>
            Defines the public interface for a class that implements a file scan orchestrator. A file scan orchestrator is
            responsible for analyzing a collection of files and persisting a signature that uniquely identifies each file's
            contents.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Orchestration.IFileScanOrchestrator.ScanFilesAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Scans a set of files, analyzing and storing signatures that uniquely identify them.
            </summary>
            <param name="files">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the full paths of the files to scan.</param>
            <returns>A <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanResult"/> value indicating the result of the scanning operation.</returns>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Output.ConsoleProgressBar">
            <summary>
            Provides a method to display a progress bar in a console window.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Output.ConsoleProgressBar.WriteProgressBar(System.Single,System.Boolean)">
            <summary>
            Writes a progress bar to console standard output.
            </summary>
            <param name="progress">A <see cref="T:System.Single"/> with the amount of progress to display.</param>
            <param name="resetCursorLocation">If <c>true</c>, attempts to reset the cursor to its
            original location after displaying the progress bar. This functionality is not supported in
            all environments.</param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Output.ConsoleProgressBar.TrySetCursorVisibility(System.Boolean)">
            <summary>
            Attempts to set console cursor visibility to the provided value.
            </summary>
            <param name="visible"><c>true</c> to set the cursor visible; false otherwise.</param>
            <returns><c>true</c> if on Windows platform; false otherwise.</returns>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Output.Csv.CsvFileFingerprintWriter">
            <summary>
            Writes <see cref="T:RiotClub.FireMoth.Services.Repository.IFileFingerprint"/> data in CSV format.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Output.Csv.CsvFileFingerprintWriter.#ctor(System.IO.StreamWriter,CsvHelper.IFactory,Microsoft.Extensions.Logging.ILogger{RiotClub.FireMoth.Services.Output.Csv.CsvFileFingerprintWriter})">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.Output.Csv.CsvFileFingerprintWriter"/> class. 
            </summary>
            <param name="outputWriter">The <see cref="T:System.IO.StreamWriter"/> object to which data is written.
            </param>
            <param name="csvWriterFactory"> The <see cref="T:CsvHelper.IFactory"/> object used to create a
            <see cref="T:CsvHelper.CsvWriter"/> instance for writing CSV output.</param>
            <param name="logger">The <see cref="T:Microsoft.Extensions.Logging.ILogger`1"/> to which log output
            is written.</param>
            <param name="leaveOpen">If <c>true</c>, the underlying <see cref="T:System.IO.TextWriter"/> will not be
            closed when the <see cref="T:RiotClub.FireMoth.Services.Output.Csv.CsvFileFingerprintWriter"/> is disposed.</param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Output.Csv.CsvFileFingerprintWriter.WriteFileFingerprintsAsync(System.Collections.Generic.IEnumerable{RiotClub.FireMoth.Services.Repository.IFileFingerprint})">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Output.Csv.CsvFileFingerprintWriter.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Output.Csv.CsvFileFingerprintWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and, optionally, managed resources.
            </summary>
            <param name="disposing">If true, managed resources are freed.</param>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Output.Csv.FileFingerprintMap">
            <summary>
            A mapping between an <see cref="T:RiotClub.FireMoth.Services.Repository.IFileFingerprint"/> and CSV headers.
            </summary>
            <seealso cref="T:CsvHelper.Configuration.ClassMap"/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Output.Csv.FileFingerprintMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.Output.Csv.FileFingerprintMap"/> class.
            </summary>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Output.IFileFingerprintWriter">
            <summary>
            Defines the public interface for a class that implements 
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Output.IFileFingerprintWriter.WriteFileFingerprintsAsync(System.Collections.Generic.IEnumerable{RiotClub.FireMoth.Services.Repository.IFileFingerprint})">
            <summary>
            Writes the provided collection of file fingerprints.
            </summary>
            <param name="fileFingerprints">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection to
            write.</param>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Repository.FileFingerprint">
            <summary>
            Contains data that uniquely identifies a file and its data.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.FileFingerprint.#ctor">
            <summary>
            Private, parameterless constructor required by Entity Framework ORM.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.FileFingerprint.#ctor(System.String,System.String,System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.Repository.FileFingerprint"/> class.
            </summary>
            <param name="fileName">The name of the file.</param>
            <param name="directoryName">The full path of the directory containing the file.</param>
            <param name="fileSize">The size of the file in bytes.</param>
            <param name="base64Hash">A <see cref="T:System.String"/> containing a valid base 64 hash for the
            specified file.</param>
        </member>
        <member name="P:RiotClub.FireMoth.Services.Repository.FileFingerprint.FileName">
            <inheritdoc/>
        </member>
        <member name="P:RiotClub.FireMoth.Services.Repository.FileFingerprint.DirectoryName">
            <inheritdoc/>
        </member>
        <member name="P:RiotClub.FireMoth.Services.Repository.FileFingerprint.FileSize">
            <inheritdoc/>
        </member>
        <member name="P:RiotClub.FireMoth.Services.Repository.FileFingerprint.Base64Hash">
            <inheritdoc/>
        </member>
        <member name="P:RiotClub.FireMoth.Services.Repository.FileFingerprint.FullPath">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.FileFingerprint.op_Equality(RiotClub.FireMoth.Services.Repository.FileFingerprint,RiotClub.FireMoth.Services.Repository.FileFingerprint)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">An instance of <see cref="T:RiotClub.FireMoth.Services.Repository.FileFingerprint"/> to test for equality.
            </param>
            <param name="right">A second instance of <see cref="T:RiotClub.FireMoth.Services.Repository.FileFingerprint"/> to test for
            equality.</param>
            <returns><c>true</c> if the two <see cref="T:RiotClub.FireMoth.Services.Repository.FileFingerprint"/>s are equal; false
            otherwise.</returns>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.FileFingerprint.op_Inequality(RiotClub.FireMoth.Services.Repository.FileFingerprint,RiotClub.FireMoth.Services.Repository.FileFingerprint)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">An instance of <see cref="T:RiotClub.FireMoth.Services.Repository.FileFingerprint"/> to test for inequality.
            </param>
            <param name="right">A second instance of <see cref="T:RiotClub.FireMoth.Services.Repository.FileFingerprint"/> to test for
            inequality.</param>
            <returns><c>true</c> if the two <see cref="T:RiotClub.FireMoth.Services.Repository.FileFingerprint"/>s are not equal; false
            otherwise.</returns>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.FileFingerprint.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.FileFingerprint.Equals(RiotClub.FireMoth.Services.Repository.FileFingerprint)">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.FileFingerprint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.FileFingerprint.ToString">
            <inheritdoc/>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Repository.FileFingerprintRepository">
            <summary>
            A repository that provides access to <see cref="T:RiotClub.FireMoth.Services.Repository.IFileFingerprint"/>s.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.FileFingerprintRepository.#ctor(RiotClub.FireMoth.Services.DataAccess.IDataAccessLayer{RiotClub.FireMoth.Services.Repository.FileFingerprint})">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.Repository.FileFingerprintRepository"/> class.
            </summary>
            <param name="dataAccessLayer">A <see cref="T:RiotClub.FireMoth.Services.DataAccess.IDataAccessLayer`1"/>
            implementation used to persist data.</param>
            <exception cref="T:System.ArgumentNullException">If any of the provided services are <c>null</c>.
            </exception>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.FileFingerprintRepository.GetAsync(System.Func{RiotClub.FireMoth.Services.Repository.FileFingerprint,System.Boolean},System.Func{RiotClub.FireMoth.Services.Repository.FileFingerprint,System.String})">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.FileFingerprintRepository.GetRecordsWithDuplicateHashesAsync">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.FileFingerprintRepository.GetGroupingsWithDuplicateHashesAsync">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.FileFingerprintRepository.DeleteAsync(RiotClub.FireMoth.Services.Repository.FileFingerprint)">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.FileFingerprintRepository.DeleteAllAsync">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.FileFingerprintRepository.AddAsync(RiotClub.FireMoth.Services.Repository.FileFingerprint)">
            <inheritdoc/>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Repository.IFileFingerprint">
            <summary>
            Defines the public interface for a class that implements properties that define a file and
            its hash value.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.Repository.IFileFingerprint.FileName">
            <summary>
            Gets the name of the file represented by this file fingerprint.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.Repository.IFileFingerprint.DirectoryName">
            <summary>
            Gets the name of the full directory path for the file represented by this file fingerprint.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.Repository.IFileFingerprint.FileSize">
            <summary>
            Gets the size, in bytes, for the file represented by this file fingerprint.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.Repository.IFileFingerprint.Base64Hash">
            <summary>
            Gets a base 64 string representation of the hash for the file data represented by this file fingerprint.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.Repository.IFileFingerprint.FullPath">
            <summary>
            Gets the fully qualified path to the file represented by this file fingerprint.
            </summary>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Repository.IFileFingerprintRepository">
            <summary>
            Defines the public interface for a class that implements a repository of
            <see cref="T:RiotClub.FireMoth.Services.Repository.IFileFingerprint"/>s.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.IFileFingerprintRepository.AddAsync(RiotClub.FireMoth.Services.Repository.FileFingerprint)">
            <summary>
            Adds a file fingerprint to the repository.
            </summary>
            <param name="fileFingerprint">A <see cref="T:RiotClub.FireMoth.Services.Repository.IFileFingerprint"/> to add to the repository.
            </param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.IFileFingerprintRepository.GetAsync(System.Func{RiotClub.FireMoth.Services.Repository.FileFingerprint,System.Boolean},System.Func{RiotClub.FireMoth.Services.Repository.FileFingerprint,System.String})">
            <summary>
            Retrieves file fingerprints from the repository.
            </summary>
            <param name="filter">A lambda expression that specifies a filter condition.</param>
            <param name="orderBy">A lambda expression that specifies an ordering.</param>
            <returns>IEnumerable collection of file fingerprints.</returns>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.IFileFingerprintRepository.GetRecordsWithDuplicateHashesAsync">
            <summary>
            Retrieves a collection of file fingerprints that have hash values that match other file
            fingerprints in the repository.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection containing file
            fingerprints with duplicate hash values.
            </returns>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.IFileFingerprintRepository.GetGroupingsWithDuplicateHashesAsync">
            <summary>
            Retrieves a collection of file fingerprints that have hash values that match other file
            fingerprints in the repository.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection of
            <see cref="T:System.Linq.IGrouping`2"/>; for each grouping, the key contains the hash that
            all <see cref="T:RiotClub.FireMoth.Services.Repository.FileFingerprint"/>s of the grouping share.
            </returns>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.IFileFingerprintRepository.DeleteAsync(RiotClub.FireMoth.Services.Repository.FileFingerprint)">
            <summary>
            Deletes a file fingerprint from the repository.
            </summary>
            <param name="fileFingerprint">The <see cref="T:RiotClub.FireMoth.Services.Repository.IFileFingerprint"/> to delete.</param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Repository.IFileFingerprintRepository.DeleteAllAsync">
            <summary>
            Deletes all file fingerprints from the repository.
            </summary>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Tasks.DuplicateFileHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tasks.DuplicateFileHandler.RunTaskAsync">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Tasks.DuplicateFileHandlingMethod">
            <summary>
            Specifies the method for handling duplicates at the end of the scanning process.
            </summary>
        </member>
        <member name="F:RiotClub.FireMoth.Services.Tasks.DuplicateFileHandlingMethod.NoAction">
            <summary>
            Specifies that nothing should be done to duplicate files after scanning.
            </summary>
        </member>
        <member name="F:RiotClub.FireMoth.Services.Tasks.DuplicateFileHandlingMethod.Delete">
            <summary>
            Specifies that duplicate files are deleted after scanning. 
            </summary>
        </member>
        <member name="F:RiotClub.FireMoth.Services.Tasks.DuplicateFileHandlingMethod.Move">
            <summary>
            Specifies that duplicate files should be moved to a separate directory after scanning.
            </summary>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Tasks.DuplicateFileHandlingOptions">
            <summary>
            Contains options pertaining to how duplicate files are handled by
            <see cref="T:RiotClub.FireMoth.Services.Tasks.DuplicateFileHandler"/>s.
            </summary>
        </member>
        <member name="F:RiotClub.FireMoth.Services.Tasks.DuplicateFileHandlingOptions.DuplicateFileHandling">
            <summary>
            Property used to bind this options class to its associated configuration options.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.Tasks.DuplicateFileHandlingOptions.DuplicateFileHandlingMethod">
            <summary>
            A <see cref="P:RiotClub.FireMoth.Services.Tasks.DuplicateFileHandlingOptions.DuplicateFileHandlingMethod"/> used to indicate how duplicate files should be
            handled.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.Tasks.DuplicateFileHandlingOptions.MoveDuplicateFilesToDir">
            <summary>
            The full path where duplicate files will be moved to when
            <see cref="P:RiotClub.FireMoth.Services.Tasks.DuplicateFileHandlingOptions.DuplicateFileHandlingMethod"/> is <see cref="F:RiotClub.FireMoth.Services.Tasks.DuplicateFileHandlingMethod.Move"/>.
            </summary>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Tasks.ITaskHandler">
            <summary>
            Defines the public interface for a class that runs a task.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Tasks.ITaskHandler.RunTaskAsync">
            <summary>
            Performs the task for this task handler.
            </summary>
            <returns>An asynchronous <see cref="T:System.Threading.Tasks.Task"/> with a result that indicates whether the task
            completed successfully or failed.</returns>
        </member>
    </members>
</doc>
