<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FireMoth.Services</name>
    </assembly>
    <members>
        <member name="T:RiotClub.FireMoth.Services.DataAccess.CsvDataAccessProvider">
            <summary>
            Implementation of a data access provider that persists data to a stream in CSV format.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.CsvDataAccessProvider.#ctor(System.IO.StreamWriter,Microsoft.Extensions.Logging.ILogger{RiotClub.FireMoth.Services.DataAccess.CsvDataAccessProvider},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.DataAccess.CsvDataAccessProvider"/> class.
            </summary>
            <param name="outputWriter">The <see cref="T:System.IO.TextWriter"/> object to which data is written.
            </param>
            <param name="logger">The logger.</param>
            <param name="leaveOpen">If <c>true</c>, the underlying <see cref="T:System.IO.TextWriter"/> will not
            be closed when the <see cref="T:RiotClub.FireMoth.Services.DataAccess.CsvDataAccessProvider"/> is disposed.</param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.CsvDataAccessProvider.AddFileRecord(RiotClub.FireMoth.Services.DataAccess.IFileFingerprint)">
            <inheritdoc/>
            <exception cref="T:System.ArgumentNullException">Thrown when provided
            <see cref="T:RiotClub.FireMoth.Services.DataAccess.IFileFingerprint"/> reference is null.</exception>
            <exception cref="T:System.ObjectDisposedException">Thrown when object is in a disposed state.
            </exception>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.CsvDataAccessProvider.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.CsvDataAccessProvider.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and, optionally, managed resources.
            </summary>
            <param name="disposing">If true, managed resources are freed.</param>
        </member>
        <member name="T:RiotClub.FireMoth.Services.DataAccess.FileFingerprint">
            <summary>
            Conatins data that uniquely identifies a file and its data.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.FileFingerprint.#ctor(System.String,System.String,System.Int64,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.DataAccess.FileFingerprint"/> class.
            </summary>
            <param name="fileName">The name of the file.</param>
            <param name="directoryName">The full path of the directory containing the file.</param>
            <param name="fileSize">The size of the file in bytes.</param>
            <param name="base64Hash">A <see cref="T:System.String"/> containing a valid base 64 hash for the
            specified file.</param>
        </member>
        <member name="P:RiotClub.FireMoth.Services.DataAccess.FileFingerprint.DirectoryName">
            <inheritdoc/>
        </member>
        <member name="P:RiotClub.FireMoth.Services.DataAccess.FileFingerprint.FileName">
            <inheritdoc/>
        </member>
        <member name="P:RiotClub.FireMoth.Services.DataAccess.FileFingerprint.FileSize">
            <inheritdoc/>
        </member>
        <member name="P:RiotClub.FireMoth.Services.DataAccess.FileFingerprint.Base64Hash">
            <inheritdoc/>
        </member>
        <member name="P:RiotClub.FireMoth.Services.DataAccess.FileFingerprint.FullPath">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.FileFingerprint.op_Equality(RiotClub.FireMoth.Services.DataAccess.FileFingerprint,RiotClub.FireMoth.Services.DataAccess.FileFingerprint)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">An instance of <see cref="T:RiotClub.FireMoth.Services.DataAccess.FileFingerprint"/> to test for equality.
            </param>
            <param name="right">A second instance of <see cref="T:RiotClub.FireMoth.Services.DataAccess.FileFingerprint"/> to test for
            equality.</param>
            <returns><c>true</c> if the two <see cref="T:RiotClub.FireMoth.Services.DataAccess.FileFingerprint"/>s are equal; false
            otherwise.</returns>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.FileFingerprint.op_Inequality(RiotClub.FireMoth.Services.DataAccess.FileFingerprint,RiotClub.FireMoth.Services.DataAccess.FileFingerprint)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">An instance of <see cref="T:RiotClub.FireMoth.Services.DataAccess.FileFingerprint"/> to test for inequality.
            </param>
            <param name="right">A second instance of <see cref="T:RiotClub.FireMoth.Services.DataAccess.FileFingerprint"/> to test for
            inequality.</param>
            <returns><c>true</c> if the two <see cref="T:RiotClub.FireMoth.Services.DataAccess.FileFingerprint"/>s are not equal; false
            otherwise.</returns>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.FileFingerprint.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.FileFingerprint.Equals(RiotClub.FireMoth.Services.DataAccess.FileFingerprint)">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.FileFingerprint.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.FileFingerprint.ToString">
            <inheritdoc/>
        </member>
        <member name="T:RiotClub.FireMoth.Services.DataAccess.FileFingerprintMap">
            <summary>
            A mapping between an <see cref="T:RiotClub.FireMoth.Services.DataAccess.IFileFingerprint"/> and CSV headers.
            </summary>
            <seealso cref="T:CsvHelper.Configuration.ClassMap"/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.FileFingerprintMap.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.DataAccess.FileFingerprintMap"/> class.
            </summary>
        </member>
        <member name="T:RiotClub.FireMoth.Services.DataAccess.FileFingerprintRepository">
            <summary>
            A repository of <see cref="T:RiotClub.FireMoth.Services.DataAccess.IFileFingerprint"/>s utilizing Entity Framework as a backing
            store.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.FileFingerprintRepository.Get(System.Linq.Expressions.Expression{System.Func{RiotClub.FireMoth.Services.DataAccess.IFileFingerprint,System.Boolean}},System.Func{System.Linq.IQueryable{RiotClub.FireMoth.Services.DataAccess.IFileFingerprint},System.Linq.IOrderedQueryable{RiotClub.FireMoth.Services.DataAccess.IFileFingerprint}})">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.FileFingerprintRepository.RiotClub#FireMoth#Services#DataAccess#IFileFingerprintRepository#Delete(RiotClub.FireMoth.Services.DataAccess.IFileFingerprint)">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.FileFingerprintRepository.RiotClub#FireMoth#Services#DataAccess#IFileFingerprintRepository#Insert(RiotClub.FireMoth.Services.DataAccess.IFileFingerprint)">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.FileFingerprintRepository.RiotClub#FireMoth#Services#DataAccess#IFileFingerprintRepository#Update(RiotClub.FireMoth.Services.DataAccess.IFileFingerprint)">
            <inheritdoc/>
        </member>
        <member name="T:RiotClub.FireMoth.Services.DataAccess.IDataAccessProvider">
            <summary>
            Defines the public interface for a class that implements data access and persistence
            operations.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.IDataAccessProvider.AddFileRecord(RiotClub.FireMoth.Services.DataAccess.IFileFingerprint)">
            <summary>
            Adds a file and its hash value to the backing store.
            </summary>
            <param name="fileFingerprint">An <see cref="T:RiotClub.FireMoth.Services.DataAccess.IFileFingerprint"/> containing the
            properties of the file to store.</param>
        </member>
        <member name="T:RiotClub.FireMoth.Services.DataAccess.IFileFingerprint">
            <summary>
            Defines the public interface for a class that implements properties that define a file and
            its hash value.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.DataAccess.IFileFingerprint.FileName">
            <summary>
            Gets the name of the file represented by this file fingerprint.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.DataAccess.IFileFingerprint.DirectoryName">
            <summary>
            Gets the name of the full directory path for the file represented by this file fingerprint.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.DataAccess.IFileFingerprint.FileSize">
            <summary>
            Gets the size, in bytes, for the file represented by this file fingerprint.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.DataAccess.IFileFingerprint.Base64Hash">
            <summary>
            Gets a base 64 string representation of the hash for the file data represented by this file fingerprint.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.DataAccess.IFileFingerprint.FullPath">
            <summary>
            Gets the fully qualified path to the file represented by this file fingerprint.
            </summary>
        </member>
        <member name="T:RiotClub.FireMoth.Services.DataAccess.IFileFingerprintRepository">
            <summary>
            Defines the public interface for a class that implements a repository of
            <see cref="T:RiotClub.FireMoth.Services.DataAccess.IFileFingerprint"/>s.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.IFileFingerprintRepository.Insert(RiotClub.FireMoth.Services.DataAccess.IFileFingerprint)">
            <summary>
            Adds a file fingerprint to the repository.
            </summary>
            <param name="fileFingerprint">A <see cref="T:RiotClub.FireMoth.Services.DataAccess.IFileFingerprint"/> to add to the repository.
            </param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.IFileFingerprintRepository.Get(System.Linq.Expressions.Expression{System.Func{RiotClub.FireMoth.Services.DataAccess.IFileFingerprint,System.Boolean}},System.Func{System.Linq.IQueryable{RiotClub.FireMoth.Services.DataAccess.IFileFingerprint},System.Linq.IOrderedQueryable{RiotClub.FireMoth.Services.DataAccess.IFileFingerprint}})">
            <summary>
            Retrieves file fingerprints from the repository.
            </summary>
            <param name="filter">A lambda expression that specifies a filter condition.</param>
            <param name="orderBy">A lambda expression that specifies an ordering.</param>
            <returns>IEnumerable collection of file fingerprints.</returns>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.IFileFingerprintRepository.Update(RiotClub.FireMoth.Services.DataAccess.IFileFingerprint)">
            <summary>
            Updates a file fingerprint in the repository.
            </summary>
            <param name="fileFingerprint">The <see cref="T:RiotClub.FireMoth.Services.DataAccess.IFileFingerprint"/> to update.</param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.IFileFingerprintRepository.Delete(RiotClub.FireMoth.Services.DataAccess.IFileFingerprint)">
            <summary>
            Deletes a file fingerprint from the repository.
            </summary>
            <param name="fileFingerprint">The <see cref="T:RiotClub.FireMoth.Services.DataAccess.IFileFingerprint"/> to delete.</param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.EntityFrameworkSqlite.FileFingerprintTypeConfiguration.Configure(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{RiotClub.FireMoth.Services.DataAccess.FileFingerprint})">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.EntityFrameworkSqlite.FireMothContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.DataAccess.EntityFrameworkSqlite.FireMothContext"/> class.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.EntityFrameworkSqlite.FireMothContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc/>
            <seealso cref="T:RiotClub.FireMoth.Services.DataAccess.EntityFrameworkSqlite.FileFingerprintTypeConfiguration"/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAccess.EntityFrameworkSqlite.FireMothContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <inheritdoc/>
        </member>
        <member name="T:RiotClub.FireMoth.Services.DataAnalysis.IFileHasher">
            <summary>
            Defines the public interface for a class that implements file hashing operations.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAnalysis.IFileHasher.ComputeHashFromStream(System.IO.Stream)">
            <summary>
            Computes the hash of the provided stream's data.
            </summary>
            <param name="inputStream">The <see cref="T:System.IO.Stream"/> containing the data to hash.</param>
            <returns>An array of <c>byte</c> containing the value of the computed hash.</returns>
        </member>
        <member name="T:RiotClub.FireMoth.Services.DataAnalysis.SHA256FileHasher">
            <summary>
            Provides file hashing services using the SHA256 algorithm.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAnalysis.SHA256FileHasher.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.DataAnalysis.SHA256FileHasher"/> class.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAnalysis.SHA256FileHasher.ComputeHashFromStream(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAnalysis.SHA256FileHasher.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.DataAnalysis.SHA256FileHasher.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and, optionally, managed resources.
            </summary>
            <param name="disposing">If true, managed resources are freed.</param>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Extensions.StringExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.String"/> objects.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Extensions.StringExtensions.IsEmptyOrWhiteSpace(System.String)">
            <summary>
            Returns <c>true</c> if the provided string is empty or contains only whitespace
            characters.
            </summary>
            <param name="value">The string to check.</param>
            <returns><c>true</c> if the provided string is empty or contains only whitespace.
            </returns>
        </member>
        <member name="M:RiotClub.FireMoth.Services.Extensions.StringExtensions.IsBase64String(System.String)">
            <summary>
            Returns <c>true</c> if the provided string is a valid base 64 string.
            </summary>
            <param name="value">The string to check.</param>
            <returns><c>true</c> if the provided string is a valid base 64 string.</returns>
        </member>
        <member name="T:RiotClub.FireMoth.Services.FileScanning.FileScanner">
            <summary>
            Directory scanner implementation that reads the files in a directory and writes the file
            and hash to an <see cref="T:RiotClub.FireMoth.Services.DataAccess.IDataAccessProvider"/>.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.FileScanner.#ctor(RiotClub.FireMoth.Services.DataAccess.IDataAccessProvider,RiotClub.FireMoth.Services.DataAnalysis.IFileHasher,Microsoft.Extensions.Logging.ILogger{RiotClub.FireMoth.Services.FileScanning.FileScanner})">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.FileScanning.FileScanner"/> class.
            </summary>
            <param name="dataAccessProvider">A <see cref="T:RiotClub.FireMoth.Services.DataAccess.IDataAccessProvider"/> that provides
            access to the application backing store.</param>
            <param name="hasher">An <see cref="T:RiotClub.FireMoth.Services.DataAnalysis.IFileHasher"/> that is used to compute hash values
            for scanned files.</param>
            <param name="log">A <see cref="T:System.IO.TextWriter"/> to which logging output will be
            written.</param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.FileScanner.ScanDirectory(RiotClub.FireMoth.Services.FileScanning.IScanOptions)">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.FileScanner.ProcessFiles(System.Collections.Generic.IEnumerable{System.IO.Abstractions.IFileInfo},RiotClub.FireMoth.Services.FileScanning.ScanResult)">
            <summary>
            Hashes a set of files and records the filename and hash string.
            </summary>
            <param name="files">The set of files to hash and record.</param>
            <param name="scanResult">A <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanResult"/> to which the names of scanned and
            skipped files will be added.</param>
        </member>
        <member name="T:RiotClub.FireMoth.Services.FileScanning.IFileScanner">
            <summary>
            Defines the public interface for a class that implements a directory scanner. A directory
            scanner is responsible for reading, analyzing, and persisting a hash or other signature that
            uniquely identifies a file and its contents.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.IFileScanner.ScanDirectory(RiotClub.FireMoth.Services.FileScanning.IScanOptions)">
            <summary>
            Scans the provided directory, analyzing and storing signatures that uniquely identify
            the files contained within.
            </summary>
            <param name="scanOptions">An <see cref="T:RiotClub.FireMoth.Services.FileScanning.IScanOptions"/> containing the options for the
            scan.</param>
            <returns>A <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanResult"/> value indicating the result of the directory
            scanning operation.</returns>
        </member>
        <member name="T:RiotClub.FireMoth.Services.FileScanning.IScanOptions">
            <summary>
            Defines the public interface for a class that specifies options used during a file scan.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.FileScanning.IScanOptions.ScanDirectory">
            <summary>
            Gets the directory to be scanned.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.FileScanning.IScanOptions.RecursiveScan">
            <summary>
            Gets a value indicating whether subdirectories of <see cref="P:RiotClub.FireMoth.Services.FileScanning.IScanOptions.ScanDirectory"/> will be
            recursively scanned.
            </summary>
        </member>
        <member name="T:RiotClub.FireMoth.Services.FileScanning.ScanError">
            <summary>
            Represents an error that occured during a file scan.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.ScanError.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanError"/> class.
            </summary>
            <param name="path">The path to the file or directory that this error pertains to.
            </param>
            <param name="message">A message describing this error.</param>
            <param name="exception">Any exception associated with this error.</param>
        </member>
        <member name="P:RiotClub.FireMoth.Services.FileScanning.ScanError.Path">
            <summary>
            Gets the path to the file or directory related to this error.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.FileScanning.ScanError.Message">
            <summary>
            Gets the message describing this error.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.FileScanning.ScanError.Exception">
            <summary>
            Gets the exception related to this error.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.ScanError.op_Equality(RiotClub.FireMoth.Services.FileScanning.ScanError,RiotClub.FireMoth.Services.FileScanning.ScanError)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">An instance of <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanError"/> to test for equality.</param>
            <param name="right">A second instance of <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanError"/> to test for equality.
            </param>
            <returns><c>true</c> if the two <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanError"/>s are equal; false otherwise.
            </returns>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.ScanError.op_Inequality(RiotClub.FireMoth.Services.FileScanning.ScanError,RiotClub.FireMoth.Services.FileScanning.ScanError)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">An instance of <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanError"/> to test for inequality.
            </param>
            <param name="right">A second instance of <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanError"/> to test for inequality.
            </param>
            <returns><c>true</c> if the two <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanError"/>s are not equal; false otherwise.
            </returns>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.ScanError.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.ScanError.Equals(RiotClub.FireMoth.Services.FileScanning.ScanError)">
            <inheritdoc/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.ScanError.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:RiotClub.FireMoth.Services.FileScanning.ScanOptions">
            <summary>
            Specifies options that are used when performing a file scan.
            </summary>
            <seealso cref="T:RiotClub.FireMoth.Services.FileScanning.IFileScanner"/>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.ScanOptions.#ctor(System.IO.Abstractions.IDirectoryInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanOptions"/> class for the provided
            directory with a non-recursive scan and <see cref="F:RiotClub.FireMoth.Services.Output.OutputDuplicateFileFingerprintsOption.All"/> output.
            </summary>
            <param name="scanDirectory">The directory to scan.</param>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.ScanOptions.#ctor(System.IO.Abstractions.IDirectoryInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanOptions"/> class for the provided
            directory.
            </summary>
            <param name="scanDirectory">The directory to scan.</param>
            <param name="recursiveScan">A flag indicating whether the scan will recursively scan
            subdirectories of <paramref name="scanDirectory"/>.</param>
        </member>
        <member name="P:RiotClub.FireMoth.Services.FileScanning.ScanOptions.ScanDirectory">
            <inheritdoc/>
        </member>
        <member name="P:RiotClub.FireMoth.Services.FileScanning.ScanOptions.RecursiveScan">
            <inheritdoc/>
        </member>
        <member name="T:RiotClub.FireMoth.Services.FileScanning.ScanResult">
            <summary>
            Specifies the result of a file scan operation.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.FileScanning.ScanResult.ScannedFiles">
            <summary>
            Gets a list of <see cref="T:RiotClub.FireMoth.Services.DataAccess.FileFingerprint"/>s for files that have been successfully scanned.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.FileScanning.ScanResult.SkippedFiles">
            <summary>
            Gets a key-value list of files that were skipped and the reason for the skip.
            </summary>
        </member>
        <member name="P:RiotClub.FireMoth.Services.FileScanning.ScanResult.Errors">
            <summary>
            Gets a list of errors that occurred.
            </summary>
        </member>
        <member name="M:RiotClub.FireMoth.Services.FileScanning.ScanResult.op_Addition(RiotClub.FireMoth.Services.FileScanning.ScanResult,RiotClub.FireMoth.Services.FileScanning.ScanResult)">
            <summary>
            Combines two <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanResult"/> objects by combining their
            <see cref="P:RiotClub.FireMoth.Services.FileScanning.ScanResult.ScannedFiles"/>, <see cref="P:RiotClub.FireMoth.Services.FileScanning.ScanResult.SkippedFiles"/>, and <see cref="P:RiotClub.FireMoth.Services.FileScanning.ScanResult.Errors"/>
            collections.
            </summary>
            <param name="a">The first of two <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanResult"/> operands to sum.</param>
            <param name="b">The second of two <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanResult"/> operands to sum.</param>
            <returns>A new <see cref="T:RiotClub.FireMoth.Services.FileScanning.ScanResult"/> containing the sum of the two operands.
            </returns>
        </member>
        <member name="T:RiotClub.FireMoth.Services.Output.OutputDuplicateFileFingerprintsOption">
            <summary>
            Options that control what file information is included in the output from a file scan
            operation.
            </summary>
        </member>
        <member name="F:RiotClub.FireMoth.Services.Output.OutputDuplicateFileFingerprintsOption.All">
            <summary>
            Output information for all scanned files.
            </summary>
        </member>
        <member name="F:RiotClub.FireMoth.Services.Output.OutputDuplicateFileFingerprintsOption.Duplicates">
            <summary>
            Output information for only duplicate files.
            </summary>
        </member>
    </members>
</doc>
